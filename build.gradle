plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
	id "org.sonarqube" version "6.0.1.5171"
}

group = 'com.fiap.tech'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

bootJar {
	mainClass.set('com.fiap.tech.FiapTechChallengePaymentApplication')
}

springBoot {
	mainClass = 'com.fiap.tech.FiapTechChallengePaymentApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka:3.3.1'
	testImplementation 'org.springframework.kafka:spring-kafka-test:3.3.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'com.mercadopago:sdk-java:2.1.29'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:3.9.0'
	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
	implementation 'org.apache.kafka:kafka-clients:3.9.0'
	implementation 'org.springframework.data:spring-data-mongodb:4.2.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:3.2.2'
	implementation 'com.fasterxml.jackson.module:jackson-module-afterburner'
	testImplementation'org.testcontainers:testcontainers:1.17.2'
	testImplementation platform('org.junit:junit-bom:5.10.0')
	testImplementation 'org.mockito:mockito-junit-jupiter:5.0.0'
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
}

tasks.named("test") {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.7"
}

jacocoTestReport {
	reports {
		xml.required.set(true)
		xml.outputLocation.set(file("$rootDir/build/reports/jacoco/test/jacocoTestReport.xml"))
		html.required.set(true)
		html.outputLocation.set(file("$rootDir/build/reports/jacoco/test/"))
	}
}

sonar {
	properties {
		property "sonar.projectKey", "fiap-g30_payment"
		property "sonar.organization", "fiap-g30"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.token", System.getenv("SONAR_TOKEN")
	}
}

test {
	reports {
		junitXml.required.set(true)
		junitXml.outputLocation.set(file("$rootDir/build/reports/junit/test-results"))
		html.required.set(true)
		html.outputLocation.set(file("$rootDir/build/reports/junit/test-results-html"))
	}
}

task createReportDirs {
	doLast {
		mkdir("$rootDir/build/reports/jacoco/test")
		mkdir("$rootDir/build/reports/junit/test-results")
		mkdir("$rootDir/build/reports/junit/test-results-html")
	}
}

test {
	dependsOn createReportDirs
	useJUnitPlatform()
}